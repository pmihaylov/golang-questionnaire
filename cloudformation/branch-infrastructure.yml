Description: >

    Infrastructure for a Go Application.
    This template will deploy an EC2 instances with the CodeDeploy
    agent installed and ready for application deployments.

Parameters:

    # The following parameters are set dynamically by AWS CodePipeline

    ApplicationName:
        Type: String

    EnvironmentName:
        Type: String

    ArtifactS3Bucket:
        Type: String

    KeyName:
        Type: String

    SSHLocation:
        Type: String

    # All parameters below can be overridden on a per environment basis in stageconfig/*

    InstanceType:
        Description: The instance type to deploy to
        Type: String
        Default: t2.micro

    DeploymentStrategy:
        Description: The CodeDeploy deployment strategy to user
        Type: String
        Default: CodeDeployDefault.OneAtATime

    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.192.0.0/16

    SubnetCIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.192.10.0/24

Mappings:

    # Amazon Linux AMI 2016.09.1, released on 2016-12-22
    # https://aws.amazon.com/amazon-linux-ami/

    AWSRegionToAMI:
        us-east-1:
            AMI: ami-9be6f38c
        us-east-2:
            AMI: ami-38cd975d
        us-west-1:
            AMI: ami-1e299d7e
        us-west-2:
            AMI: ami-b73d6cd7
        ca-central-1:
            AMI: ami-eb20928f
        eu-west-1:
            AMI: ami-c51e3eb6
        eu-west-2:
            AMI: ami-bfe0eadb
        eu-central-1:
            AMI: ami-211ada4e
        ap-southeast-1:
            AMI: ami-4dd6782e
        ap-northeast-2:
            AMI: ami-94bb6dfa
        ap-northeast-1:
            AMI: ami-9f0c67f8
        ap-southeast-2:
            AMI: ami-28cff44b
        ap-south-1:
            AMI: ami-9fc7b0f0
        sa-east-1:
            AMI: ami-bb40d8d7

    # CodeDeploy installer bucket list sourced from:
    # http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-set-up-new-instance.html

    CodeDeployInstallerBuckets:
        us-east-1:
            Bucket: aws-codedeploy-us-east-1
        us-east-2:
            Bucket: aws-codedeploy-us-east-2
        us-west-1:
            Bucket: aws-codedeploy-us-west-1
        us-west-2:
            Bucket: aws-codedeploy-us-west-2
        ca-central-1:
            Bucket: aws-codedeploy-ca-central-1
        eu-west-1:
            Bucket: aws-codedeploy-eu-west-1
        eu-west-2:
            Bucket: aws-codedeploy-eu-west-2
        eu-central-1:
            Bucket: aws-codedeploy-eu-central-1
        ap-northeast-1:
            Bucket: aws-codedeploy-ap-northeast-1
        ap-northeast-2:
            Bucket: aws-codedeploy-ap-northeast-2
        ap-southeast-1:
            Bucket: aws-codedeploy-ap-southeast-1
        ap-southeast-2:
            Bucket: aws-codedeploy-ap-southeast-2
        ap-south-1:
            Bucket: aws-codedeploy-ap-south-1
        sa-east-1:
            Bucket: aws-codedeploy-sa-east-1


Resources:

    ###########################################
    # EC2 Instance
    ###########################################

    EC2Instance:
        Type: AWS::EC2::Instance
        Properties:
            ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMI]
            InstanceType: !Ref InstanceType
            IamInstanceProfile: !Ref InstanceProfile
            KeyName: !Ref KeyName
            SecurityGroupIds:
                - !Ref ApplicationSecurityGroup
            SubnetId: !Ref PublicSubnet
            Tags:
                - Key: Name
                  Value: !Sub ${ApplicationName}-${EnvironmentName}
                - Key: StackId
                  Value: !Ref 'AWS::StackId'
                - Key: StackName
                  Value: !Ref 'AWS::StackName'

            UserData: !
                "Fn::Base64": !Sub
                    - |+
                        #!/bin/bash

                        # Set up a CloudFormation wait signal, so we can notify when the CodeDeploy agent is running
                        yum install -y aws-cfn-bootstrap
                        /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2Instance

                        # Install CodeDeploy agent
                        yum -y update
                        yum install -y ruby
                        cd /home/ec2-user
                        curl -O https://${InstallerBucket}.s3.amazonaws.com/latest/install
                        chmod +x ./install
                        ./install auto

                        # Send a success/failure signal to CloudFormation based on the exit status of the last command
                        /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2Instance
                    - InstallerBucket:
                        Fn::FindInMap: [ CodeDeployInstallerBuckets, !Ref 'AWS::Region', Bucket]

    ###########################################
    # CodeDeploy
    ###########################################

    CodeDeployDeploymentGroup:
        Type: AWS::CodeDeploy::DeploymentGroup
        Properties:
            DeploymentGroupName: !Ref EnvironmentName
            DeploymentConfigName: !Ref DeploymentStrategy
            ServiceRoleArn:
                Fn::ImportValue:
                    !Sub CodeDeployServiceRoleArn-${ApplicationName}
            ApplicationName:
                Fn::ImportValue:
                    !Sub CodeDeployApplication-${ApplicationName}

    ###########################################
    # Security Groups
    ###########################################

    ApplicationSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref VPC
            GroupDescription: Controls who can access the application server
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: '22'
                  ToPort: '22'
                  CidrIp: !Ref SSHLocation
                - IpProtocol: tcp
                  FromPort: '80'
                  ToPort: '80'
                  CidrIp: 0.0.0.0/0
            Tags:
                - Key: Name
                  Value: !Sub ${ApplicationName}-${EnvironmentName}-ApplicationServer

    ###########################################
    # IAM
    ###########################################

    InstanceRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${ApplicationName}-${EnvironmentName}-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        }
                    }]
                }
            Policies:
                - PolicyName: !Sub ${ApplicationName}-${EnvironmentName}-${AWS::Region}
                  PolicyDocument: !Sub |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "s3:Get*"
                            ],
                            "Resource": [ "arn:aws:s3:::${ArtifactS3Bucket}/${ApplicationName}/*" ]
                        }]
                    }

    InstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - !Ref InstanceRole

    ###########################################
    # VPC, Subnets, IGW, Routes, NAT etc
    ###########################################

    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Sub ${ApplicationName}-${EnvironmentName}

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub ${ApplicationName}-${EnvironmentName}

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs ]
            CidrBlock: !Ref SubnetCIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${ApplicationName} ${EnvironmentName} Public Subnet

    NatGatewayEIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc
            InstanceId: !Ref EC2Instance

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${ApplicationName} ${EnvironmentName} Public Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet
Outputs:

    WebsiteURL:
        Description: Webserver URL
        Value: !Sub http://${EC2Instance.PublicIp}
